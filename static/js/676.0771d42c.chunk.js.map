{"version":3,"file":"static/js/676.0771d42c.chunk.js","mappings":"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","sources":["components/Container/Container.jsx","webpack://react-homework-template/./src/components/MovieGallery/MovieGallery.module.css?cb9b","components/MovieGallery/MovieGallery.jsx","components/Searchbar/Searchbar.jsx","pages/MoviesPage/MoviesPage.jsx","services/api.js","services/settings.js","services/fetchMovies.js"],"sourcesContent":["export const Container = ({ children }) => {\n  return <div>{children}</div>;\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"galleryList\":\"MovieGallery_galleryList__JyKHn\",\"galleryList_item\":\"MovieGallery_galleryList_item__zrpAO\"};","import { Link } from 'react-router-dom';\nimport style from './MovieGallery.module.css';\nimport PropTypes from 'prop-types';\n\nexport const MovieGallery = ({ movies, prevLocation }) => {\n  const renderGallery = () =>\n    movies.map(({ id, title }) => (\n      <li key={id} className={style.galleryList_item}>\n        <Link to={`/movies/${id}`} state={{ from: prevLocation }}>\n          {title}\n        </Link>\n      </li>\n    ));\n\n  return (\n    <div>\n      <ul className={style.galleryList}>{movies ? renderGallery() : null}</ul>\n    </div>\n  );\n};\n\nMovieGallery.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    }).isRequired\n  ),\n};\n\nexport default MovieGallery;\n","import { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst Searchbar = ({ onSearch }) => {\n  const [searchRequest, setSearchRequest] = useState('');\n\n  const handleRequestChange = event => {\n    setSearchRequest(event.currentTarget.value.toLowerCase());\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (searchRequest.trim() === '') {\n      alert('Search field is empty!');\n      return;\n    }\n    onSearch(searchRequest);\n    setSearchRequest('');\n  };\n\n  return (\n    <header>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          name=\"searchRequest\"\n          value={searchRequest}\n          onChange={handleRequestChange}\n          autoComplete=\"off\"\n          autoFocus\n        />\n        <button type=\"submit\">Search</button>\n      </form>\n    </header>\n  );\n};\n\nSearchbar.propTypes = {\n  onSearch: PropTypes.func.isRequired,\n};\n\nexport default Searchbar;","import { useState, useEffect } from 'react';\nimport { useSearchParams, useLocation } from 'react-router-dom';\n\nimport { toast } from 'react-toastify';\n\nimport { Container } from 'components/Container/Container';\n\nimport Loader from 'components/Loader/Loader';\nimport Searchbar from 'components/Searchbar/Searchbar';\nimport MovieGallery from 'components/MovieGallery/MovieGallery';\n\nimport { fetchMoviesByRequest } from 'services/fetchMovies';\n\nexport default function MoviesPage() {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [movies, setMovies] = useState([]);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const searchRequest = searchParams.get('query');\n\n  const location = useLocation();\n\n  useEffect(() => {\n    if (!searchRequest) {\n      return;\n    }\n    const updateMovies = searchRequest => {\n      setIsLoading(true);\n      try {\n        fetchMoviesByRequest(searchRequest).then(data => {\n          if (!data.data.results.length) {\n            alert('There is no movies found with that search request');\n            return;\n          }\n          const mappedMovies = data.data.results.map(({ id, title }) => ({\n            id,\n            title,\n          }));\n          setMovies([...mappedMovies]);\n        });\n      } catch (error) {\n        setError(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    if (searchRequest !== '') {\n      updateMovies(searchRequest);\n    }\n  }, [searchRequest]);\n\n  const handleSearchSubmit = value => {\n    setSearchParams({ query: `${value}` });\n  };\n\n  return (\n    <Container>\n      <Searchbar onSearch={handleSearchSubmit} />\n      {error && toast.error(`Whoops, something went wrong: ${error.message}`)}\n      {isLoading && <Loader />}\n      {movies.length > 0 && (\n        <MovieGallery movies={movies} prevLocation={location} />\n      )}\n    </Container>\n  );\n}\n","import axios from 'axios';\n\nexport const http = {\n  get(url) {\n    return axios.get(url);\n  },\n  post(url, body) {\n    return axios.post(url, body);\n  },\n};\n","const settings = {\n  BASE_URL: 'https://api.themoviedb.org/3',\n  API_KEY: '043e40e709f70f9e9754b1cb786dc0f2',\n  DEFAULT_LANGUAGE: 'en-US',\n};\n\nexport default settings;\n","import { http } from './api';\nimport apiSettings from './settings';\n\nconst { BASE_URL, API_KEY } = apiSettings;\n\nexport const fetchMovies = (page = 1) => {\n  return http.get(\n    `${BASE_URL}/trending/movie/day?api_key=${API_KEY}&page=${page}`\n  );\n};\n\nexport const fetchMoviesByRequest = (searchRequest, page = 1) => {\n  return http.get(\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&page=${page}&query=${searchRequest}`\n  );\n};\n\nexport const fetchMoviesById = movieId => {\n  return http.get(`${BASE_URL}/movie/${movieId}?api_key=${API_KEY}`);\n};\n\nexport const fetchCast = movieId => {\n  return http.get(`${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}`);\n};\n\nexport const fetchReviews = movieId => {\n  return http.get(`${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}`);\n};\n"],"names":["Container","children","movies","prevLocation","className","style","map","id","title","to","state","from","onSearch","useState","searchRequest","setSearchRequest","onSubmit","event","preventDefault","trim","alert","type","name","value","onChange","currentTarget","toLowerCase","autoComplete","autoFocus","MoviesPage","useSearchParams","searchParams","setSearchParams","setMovies","error","setError","isLoading","setIsLoading","get","location","useLocation","useEffect","fetchMoviesByRequest","then","data","results","length","mappedMovies","updateMovies","query","toast","message","Loader","MovieGallery","http","url","axios","BASE_URL","API_KEY","DEFAULT_LANGUAGE","apiSettings","fetchMovies","page","fetchMoviesById","movieId","fetchCast","fetchReviews"],"sourceRoot":""}