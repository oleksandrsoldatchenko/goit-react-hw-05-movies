{"version":3,"file":"static/js/676.a5f1e7da.chunk.js","mappings":"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","sources":["components/Container/Container.jsx","webpack://react-homework-template/./src/components/MovieGallery/MovieGallery.module.css?cb9b","components/MovieGallery/MovieGallery.jsx","components/Searchbar/Searchbar.jsx","pages/MoviesPage/MoviesPage.jsx","services/api.js","services/settings.js","services/fetchMovies.js"],"sourcesContent":["export const Container = ({ children }) => {\n  return <div>{children}</div>;\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"galleryList\":\"MovieGallery_galleryList__JyKHn\",\"galleryList_item\":\"MovieGallery_galleryList_item__zrpAO\"};","import { Link } from 'react-router-dom';\nimport style from './MovieGallery.module.css';\nimport PropTypes from 'prop-types';\n\nexport const MovieGallery = ({ movies, prevLocation }) => {\n  const renderGallery = () =>\n    movies.map(({ id, title }) => (\n      <li key={id} className={style.galleryList_item}>\n        <Link to={`/movies/${id}`} state={{ from: prevLocation }}>\n          {title}\n        </Link>\n      </li>\n    ));\n\n  return (\n    <div>\n      <ul className={style.galleryList}>{movies ? renderGallery() : null}</ul>\n    </div>\n  );\n};\n\nMovieGallery.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    }).isRequired\n  ),\n};\n\nexport default MovieGallery;\n","import { useState } from 'react';\nimport { toast } from 'react-toastify';\nimport PropTypes from 'prop-types';\n\nconst SearchBar = ({ onSubmit }) => {\n  const [name, setName] = useState('');\n\n  // Забираємо дані з імпута і перекидаємо в стейт\n  const handleNameChange = e => {\n    const newName = e.currentTarget.value.toLowerCase();\n    setName(newName);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    console.log('click');\n    const userInput = name.trim();\n    if (userInput === '') {\n      toast.error('fill in the fields');\n      return;\n    }\n\n    onSubmit(userInput);\n    // Очищуємо інпут\n    cleanInput();\n  };\n\n  const cleanInput = () => {\n    setName('');\n  };\n\n  return (\n    <>\n      <header>\n        <form onSubmit={handleSubmit}>\n          <input\n            type=\"text\"\n            placeholder=\"Search\"\n            value={name}\n            onChange={handleNameChange}\n          />\n          <button type=\"submit\">Search</button>\n        </form>\n      </header>\n    </>\n  );\n};\n\n\nSearchBar.propTypes = {\n  onSearch: PropTypes.func.isRequired,\n};\n\nexport default SearchBar;\n","import { useState, useEffect } from 'react';\nimport { useSearchParams, useLocation } from 'react-router-dom';\n\nimport { toast } from 'react-toastify';\n\nimport { Container } from 'components/Container/Container';\n\nimport Loader from 'components/Loader/Loader';\nimport Searchbar from 'components/Searchbar/Searchbar';\nimport MovieGallery from 'components/MovieGallery/MovieGallery';\n\nimport { fetchMoviesByRequest } from 'services/fetchMovies';\n\nexport default function MoviesPage() {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [movies, setMovies] = useState([]);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const searchRequest = searchParams.get('query');\n\n  const location = useLocation();\n\n  useEffect(() => {\n    if (!searchRequest) {\n      return;\n    }\n    const updateMovies = searchRequest => {\n      setIsLoading(true);\n      try {\n        fetchMoviesByRequest(searchRequest).then(data => {\n          if (!data.data.results.length) {\n            return toast.error(\n              'There is no movies found with that search request'\n            );\n          }\n          const mappedMovies = data.data.results.map(({ id, title }) => ({\n            id,\n            title,\n          }));\n          setMovies([...mappedMovies]);\n        });\n      } catch (error) {\n        setError(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    if (searchRequest !== '') {\n      updateMovies(searchRequest);\n    }\n  }, [searchRequest]);\n\n  const handleSearchSubmit = value => {\n    setSearchParams({ query: `${value}` });\n  };\n\n  return (\n    <Container>\n      <Searchbar onSearch={handleSearchSubmit} />\n      {error && toast.error(`Whoops, something went wrong: ${error.message}`)}\n      {isLoading && <Loader />}\n      {movies.length > 0 && (\n        <MovieGallery movies={movies} prevLocation={location} />\n      )}\n    </Container>\n  );\n}\n","import axios from 'axios';\n\nexport const http = {\n  get(url) {\n    return axios.get(url);\n  },\n  post(url, body) {\n    return axios.post(url, body);\n  },\n};\n","const settings = {\n  BASE_URL: 'https://api.themoviedb.org/3',\n  API_KEY: '043e40e709f70f9e9754b1cb786dc0f2',\n  DEFAULT_LANGUAGE: 'en-US',\n};\n\nexport default settings;\n","import { http } from './api';\nimport apiSettings from './settings';\n\nconst { BASE_URL, API_KEY } = apiSettings;\n\nexport const fetchMovies = (page = 1) => {\n  return http.get(\n    `${BASE_URL}/trending/movie/day?api_key=${API_KEY}&page=${page}`\n  );\n};\n\nexport const fetchMoviesByRequest = (searchRequest, page = 1) => {\n  return http.get(\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&page=${page}&query=${searchRequest}`\n  );\n};\n\nexport const fetchMoviesById = movieId => {\n  return http.get(`${BASE_URL}/movie/${movieId}?api_key=${API_KEY}`);\n};\n\nexport const fetchCast = movieId => {\n  return http.get(`${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}`);\n};\n\nexport const fetchReviews = movieId => {\n  return http.get(`${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}`);\n};\n"],"names":["Container","children","movies","prevLocation","className","style","map","id","title","to","state","from","onSubmit","useState","name","setName","cleanInput","e","preventDefault","console","log","userInput","trim","toast","type","placeholder","value","onChange","newName","currentTarget","toLowerCase","MoviesPage","useSearchParams","searchParams","setSearchParams","setMovies","error","setError","isLoading","setIsLoading","searchRequest","get","location","useLocation","useEffect","fetchMoviesByRequest","then","data","results","length","mappedMovies","updateMovies","Searchbar","onSearch","query","message","Loader","MovieGallery","http","url","axios","BASE_URL","API_KEY","DEFAULT_LANGUAGE","apiSettings","fetchMovies","page","fetchMoviesById","movieId","fetchCast","fetchReviews"],"sourceRoot":""}